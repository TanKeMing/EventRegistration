@page "/eventss/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Event</h3>
<hr />
<br />
<FormComponent ButtonText="Create Event" events="events"
               OnValidSubmit="@CreateEvent" />

@*<EditForm Model="@events" OnValidSubmit="CreateEvent">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Event name: </label>
        <div>
            <InputText @bind-Value="@events.EventName" class="form-control" />
            <ValidationMessage For="@(() => events.EventName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Event description: </label>
        <div>
            <InputText @bind-Value="@events.EventDescription" class="form-control" />
            <ValidationMessage For="@(() => events.EventDescription)" />
        </div>
    </div>

    <div class="form-group">
        <label>Event venue: </label>
        <div>
            <InputText @bind-Value="@events.EventVenue" class="form-control" />
            <ValidationMessage For="@(() => events.EventVenue)" />
        </div>
    </div>
    <div class="form-group">
        <label>Event time: </label>
        <div>
            <InputText @bind-Value="@events.Eventtime" class="form-control" />
            <ValidationMessage For="@(() => events.Eventtime)" />
        </div>
    </div>

    <div class="form-group">
        <label>Date Created: </label>
        <div>
            <InputDate @bind-Value="@events.Eventdatein" class="form-control" />
            <ValidationMessage For="@(() => events.Eventdatein)" />
        </div>
    </div>

    <div class="form-group">
        <label>VenueName </label>
        <div>
            <InputSelect @bind-Value="events.Venueid" class="form-control">
                <option value="">-- Select Venue ID --</option>
                @if (Venues != null)
                {
                    foreach (var venue in Venues)
                    {
                        <option value="@venue.Id">@venue.Venuename</option>}
                }
            </InputSelect>
            <ValidationMessage For="@(() => events.Venueid)" />
        </div>
    </div>


    <button type="submit" class="btn btn-success btn-block">
        Create Event
    </button>
</EditForm>*@

@code {
    Event events = new Event();
    private IList<Venue> Venues;


    protected async override Task OnInitializedAsync()
    {
        Venues = await _client.GetFromJsonAsync<List<Venue>>($"{Endpoints.VenuesEndpoint}");
    }

    private async Task CreateEvent()
    {
        await _client.PostAsJsonAsync(Endpoints.EventsEndpoint, events);
        _navManager.NavigateTo("/eventss/");
    } }

