@page "/payments/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Payment</h3>
<hr />
<br />

<EditForm Model="@payment" OnValidSubmit="CreatePayment">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Total payment: </label>
        <div>
            <InputText @bind-Value="@payment.Totalpayment" class="form-control" />
            <ValidationMessage For="@(() => payment.Totalpayment)" />
        </div>
    </div>

    <div class="form-group">
        <label>Payment type: </label>
        <div>
            <InputText @bind-Value="@payment.Paymenttype" class="form-control" />
            <ValidationMessage For="@(() => payment.Paymenttype)" />
        </div>
    </div>

    <div class="form-group">
        <label>Location: </label>
        <div>
            <InputSelect @bind-Value="payment.Registrationid" class="form-control">
                <option value="">-- Select Registration location --</option>
                @if ( Registrations != null)
                {
                    foreach (var registration in Registrations)
                    {
                        <option value="@registration.Id">@registration.location</option>}
                }
            </InputSelect>
            <ValidationMessage For="@(() => payment.Registrationid)" />
        </div>
    </div>

    <div class="form-group">
        <label>Date Created: </label>
        <div>
            <InputDate @bind-Value="@payment.Paymentdatein" class="form-control" />
            <ValidationMessage For="@(() => payment.Paymentdatein)" />
        </div>
    </div>


   

    <button type="submit" class="btn btn-success btn-block">
        Insert Payment
    </button>
</EditForm>

@code {
    Payment payment = new Payment();
    private IList<Registration> Registrations;


    protected async override Task OnInitializedAsync()
    {
        Registrations = await _client.GetFromJsonAsync<List<Registration>>($"{Endpoints.RegistrationsEndpoint}");
    }

    private async Task CreatePayment()
    {
        await _client.PostAsJsonAsync(Endpoints.PaymentsEndpoint, payment);
        _navManager.NavigateTo("/payments/");
    }
}
